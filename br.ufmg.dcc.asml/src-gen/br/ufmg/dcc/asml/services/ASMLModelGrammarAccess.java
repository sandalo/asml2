/*
* generated by Xtext
*/
package br.ufmg.dcc.asml.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ASMLModelGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ASMLModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ASMLModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArchitectureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameID_ASMLTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cImportKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cImportURIAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_3_1_0 = (RuleCall)cImportURIAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cComponentsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cComponentsAbstractComponentParserRuleCall_4_0 = (RuleCall)cComponentsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cIgnoreKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Assignment cIgnoreAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final RuleCall cIgnoreSTRINGTerminalRuleCall_5_1_0_0 = (RuleCall)cIgnoreAssignment_5_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ASMLModel:
		//	"architecture" name=ID_ASML "{" ("import" importURI=STRING ";")? components+=AbstractComponent* ("ignore"
		//	(ignore+=STRING ","?)* ";")? "}";
		public ParserRule getRule() { return rule; }

		//"architecture" name=ID_ASML "{" ("import" importURI=STRING ";")? components+=AbstractComponent* ("ignore"
		//(ignore+=STRING ","?)* ";")? "}"
		public Group getGroup() { return cGroup; }

		//"architecture"
		public Keyword getArchitectureKeyword_0() { return cArchitectureKeyword_0; }

		//name=ID_ASML
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID_ASML
		public RuleCall getNameID_ASMLTerminalRuleCall_1_0() { return cNameID_ASMLTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("import" importURI=STRING ";")?
		public Group getGroup_3() { return cGroup_3; }

		//"import"
		public Keyword getImportKeyword_3_0() { return cImportKeyword_3_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_3_1() { return cImportURIAssignment_3_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_3_1_0() { return cImportURISTRINGTerminalRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3_2() { return cSemicolonKeyword_3_2; }

		//components+=AbstractComponent*
		public Assignment getComponentsAssignment_4() { return cComponentsAssignment_4; }

		//AbstractComponent
		public RuleCall getComponentsAbstractComponentParserRuleCall_4_0() { return cComponentsAbstractComponentParserRuleCall_4_0; }

		//("ignore" (ignore+=STRING ","?)* ";")?
		public Group getGroup_5() { return cGroup_5; }

		//"ignore"
		public Keyword getIgnoreKeyword_5_0() { return cIgnoreKeyword_5_0; }

		//(ignore+=STRING ","?)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//ignore+=STRING
		public Assignment getIgnoreAssignment_5_1_0() { return cIgnoreAssignment_5_1_0; }

		//STRING
		public RuleCall getIgnoreSTRINGTerminalRuleCall_5_1_0_0() { return cIgnoreSTRINGTerminalRuleCall_5_1_0_0; }

		//","?
		public Keyword getCommaKeyword_5_1_1() { return cCommaKeyword_5_1_1; }

		//";"
		public Keyword getSemicolonKeyword_5_2() { return cSemicolonKeyword_5_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class AbstractComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractComponent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMetaModuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cViewParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractComponent:
		//	MetaModule | View;
		public ParserRule getRule() { return rule; }

		//MetaModule | View
		public Alternatives getAlternatives() { return cAlternatives; }

		//MetaModule
		public RuleCall getMetaModuleParserRuleCall_0() { return cMetaModuleParserRuleCall_0; }

		//View
		public RuleCall getViewParserRuleCall_1() { return cViewParserRuleCall_1; }
	}

	public class ViewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "View");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cViewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameID_ASMLTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cGroup_3.eContents().get(0);
		private final Keyword cAttributesKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cAttributesAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0_1_0 = (RuleCall)cAttributesAssignment_3_0_1.eContents().get(0);
		private final Keyword cCommaKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cComponentsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cComponentsAbstractComponentParserRuleCall_4_0 = (RuleCall)cComponentsAssignment_4.eContents().get(0);
		private final Assignment cRestrictionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRestrictionsRestrictionParserRuleCall_5_0 = (RuleCall)cRestrictionsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//View:
		//	"view" name=ID_ASML "{" (("attributes" attributes+=Attribute ","?)* ";")? components+=AbstractComponent*
		//	restrictions+=Restriction* "}";
		public ParserRule getRule() { return rule; }

		//"view" name=ID_ASML "{" (("attributes" attributes+=Attribute ","?)* ";")? components+=AbstractComponent*
		//restrictions+=Restriction* "}"
		public Group getGroup() { return cGroup; }

		//"view"
		public Keyword getViewKeyword_0() { return cViewKeyword_0; }

		//name=ID_ASML
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID_ASML
		public RuleCall getNameID_ASMLTerminalRuleCall_1_0() { return cNameID_ASMLTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(("attributes" attributes+=Attribute ","?)* ";")?
		public Group getGroup_3() { return cGroup_3; }

		//("attributes" attributes+=Attribute ","?)*
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"attributes"
		public Keyword getAttributesKeyword_3_0_0() { return cAttributesKeyword_3_0_0; }

		//attributes+=Attribute
		public Assignment getAttributesAssignment_3_0_1() { return cAttributesAssignment_3_0_1; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0_1_0() { return cAttributesAttributeParserRuleCall_3_0_1_0; }

		//","?
		public Keyword getCommaKeyword_3_0_2() { return cCommaKeyword_3_0_2; }

		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }

		//components+=AbstractComponent*
		public Assignment getComponentsAssignment_4() { return cComponentsAssignment_4; }

		//AbstractComponent
		public RuleCall getComponentsAbstractComponentParserRuleCall_4_0() { return cComponentsAbstractComponentParserRuleCall_4_0; }

		//restrictions+=Restriction*
		public Assignment getRestrictionsAssignment_5() { return cRestrictionsAssignment_5; }

		//Restriction
		public RuleCall getRestrictionsRestrictionParserRuleCall_5_0() { return cRestrictionsRestrictionParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameID_ASMLTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Attribute:
		//	name=ID_ASML ":" value=STRING;
		public ParserRule getRule() { return rule; }

		//name=ID_ASML ":" value=STRING
		public Group getGroup() { return cGroup; }

		//name=ID_ASML
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID_ASML
		public RuleCall getNameID_ASMLTerminalRuleCall_0_0() { return cNameID_ASMLTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}

	public class AbstractNameConvetionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractNameConvetion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassMatchingParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractNameConvetion:
		//	STRING | ClassMatching;
		public ParserRule getRule() { return rule; }

		//STRING | ClassMatching
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ClassMatching
		public RuleCall getClassMatchingParserRuleCall_1() { return cClassMatchingParserRuleCall_1; }
	}

	public class ExpressionMatchingOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionMatchingOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cANDAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cANDAndKeyword_0_0 = (Keyword)cANDAssignment_0.eContents().get(0);
		private final Assignment cORAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cOROrKeyword_1_0 = (Keyword)cORAssignment_1.eContents().get(0);
		
		//ExpressionMatchingOperator:
		//	AND="and" | OR="or";
		public ParserRule getRule() { return rule; }

		//AND="and" | OR="or"
		public Alternatives getAlternatives() { return cAlternatives; }

		//AND="and"
		public Assignment getANDAssignment_0() { return cANDAssignment_0; }

		//"and"
		public Keyword getANDAndKeyword_0_0() { return cANDAndKeyword_0_0; }

		//OR="or"
		public Assignment getORAssignment_1() { return cORAssignment_1; }

		//"or"
		public Keyword getOROrKeyword_1_0() { return cOROrKeyword_1_0; }
	}

	public class ModuleMatchingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModuleMatching");
		private final Assignment cParameterAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cParameterModuleMatchingParamenterEnumRuleCall_0 = (RuleCall)cParameterAssignment.eContents().get(0);
		
		//ModuleMatching:
		//	parameter=ModuleMatchingParamenter;
		public ParserRule getRule() { return rule; }

		//parameter=ModuleMatchingParamenter
		public Assignment getParameterAssignment() { return cParameterAssignment; }

		//ModuleMatchingParamenter
		public RuleCall getParameterModuleMatchingParamenterEnumRuleCall_0() { return cParameterModuleMatchingParamenterEnumRuleCall_0; }
	}

	public class ClassMatchingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassMatching");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionMatchingAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionMatchingExpressionMatchingClauseEnumRuleCall_0_0 = (RuleCall)cExpressionMatchingAssignment_0.eContents().get(0);
		private final Assignment cParameterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParameterSTRINGTerminalRuleCall_1_0 = (RuleCall)cParameterAssignment_1.eContents().get(0);
		
		////	(expressionMatchings=ExpressionMatchingClause parameter=STRING (operator=ExpressionMatchingOperator )?)?
		//ClassMatching:
		//	expressionMatching=ExpressionMatchingClause parameter=STRING;
		public ParserRule getRule() { return rule; }

		//expressionMatching=ExpressionMatchingClause parameter=STRING
		public Group getGroup() { return cGroup; }

		//expressionMatching=ExpressionMatchingClause
		public Assignment getExpressionMatchingAssignment_0() { return cExpressionMatchingAssignment_0; }

		//ExpressionMatchingClause
		public RuleCall getExpressionMatchingExpressionMatchingClauseEnumRuleCall_0_0() { return cExpressionMatchingExpressionMatchingClauseEnumRuleCall_0_0; }

		//parameter=STRING
		public Assignment getParameterAssignment_1() { return cParameterAssignment_1; }

		//STRING
		public RuleCall getParameterSTRINGTerminalRuleCall_1_0() { return cParameterSTRINGTerminalRuleCall_1_0; }
	}

	public class MetaModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetaModule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameID_ASMLTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Keyword cAttributesKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cAttributesAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_2_0_1_0 = (RuleCall)cAttributesAssignment_2_0_1.eContents().get(0);
		private final Keyword cCommaKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cMatchingKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMatchingAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMatchingSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cMatchingAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cDescriptionKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDescriptionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cDescriptionAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cComponentsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cComponentsAbstractComponentParserRuleCall_5_0 = (RuleCall)cComponentsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cRestrictionsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cRestrictionsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cRestrictionsRestrictionParserRuleCall_6_2_0 = (RuleCall)cRestrictionsAssignment_6_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		////ConfigurationElement: Configuration | XmlDocument | XmlElement | File ;
		// MetaModule:
		//	name=ID_ASML "{" (("attributes:" attributes+=Attribute ","?)* ";")? ("matching:" matching=STRING ";")?
		//	("description:" description=STRING ";")? components+=AbstractComponent* ("restrictions" "{"
		//	restrictions+=Restriction* "}")? "}";
		public ParserRule getRule() { return rule; }

		//name=ID_ASML "{" (("attributes:" attributes+=Attribute ","?)* ";")? ("matching:" matching=STRING ";")? ("description:"
		//description=STRING ";")? components+=AbstractComponent* ("restrictions" "{" restrictions+=Restriction* "}")? "}"
		public Group getGroup() { return cGroup; }

		//name=ID_ASML
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID_ASML
		public RuleCall getNameID_ASMLTerminalRuleCall_0_0() { return cNameID_ASMLTerminalRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(("attributes:" attributes+=Attribute ","?)* ";")?
		public Group getGroup_2() { return cGroup_2; }

		//("attributes:" attributes+=Attribute ","?)*
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"attributes:"
		public Keyword getAttributesKeyword_2_0_0() { return cAttributesKeyword_2_0_0; }

		//attributes+=Attribute
		public Assignment getAttributesAssignment_2_0_1() { return cAttributesAssignment_2_0_1; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_2_0_1_0() { return cAttributesAttributeParserRuleCall_2_0_1_0; }

		//","?
		public Keyword getCommaKeyword_2_0_2() { return cCommaKeyword_2_0_2; }

		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }

		//("matching:" matching=STRING ";")?
		public Group getGroup_3() { return cGroup_3; }

		//"matching:"
		public Keyword getMatchingKeyword_3_0() { return cMatchingKeyword_3_0; }

		//matching=STRING
		public Assignment getMatchingAssignment_3_1() { return cMatchingAssignment_3_1; }

		//STRING
		public RuleCall getMatchingSTRINGTerminalRuleCall_3_1_0() { return cMatchingSTRINGTerminalRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3_2() { return cSemicolonKeyword_3_2; }

		//("description:" description=STRING ";")?
		public Group getGroup_4() { return cGroup_4; }

		//"description:"
		public Keyword getDescriptionKeyword_4_0() { return cDescriptionKeyword_4_0; }

		//description=STRING
		public Assignment getDescriptionAssignment_4_1() { return cDescriptionAssignment_4_1; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_4_1_0() { return cDescriptionSTRINGTerminalRuleCall_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4_2() { return cSemicolonKeyword_4_2; }

		//components+=AbstractComponent*
		public Assignment getComponentsAssignment_5() { return cComponentsAssignment_5; }

		//AbstractComponent
		public RuleCall getComponentsAbstractComponentParserRuleCall_5_0() { return cComponentsAbstractComponentParserRuleCall_5_0; }

		//("restrictions" "{" restrictions+=Restriction* "}")?
		public Group getGroup_6() { return cGroup_6; }

		//"restrictions"
		public Keyword getRestrictionsKeyword_6_0() { return cRestrictionsKeyword_6_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }

		//restrictions+=Restriction*
		public Assignment getRestrictionsAssignment_6_2() { return cRestrictionsAssignment_6_2; }

		//Restriction
		public RuleCall getRestrictionsRestrictionParserRuleCall_6_2_0() { return cRestrictionsRestrictionParserRuleCall_6_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6_3() { return cRightCurlyBracketKeyword_6_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cID_ASMLTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cID_ASMLTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID_ASML ("." ID_ASML)*;
		public ParserRule getRule() { return rule; }

		//ID_ASML ("." ID_ASML)*
		public Group getGroup() { return cGroup; }

		//ID_ASML
		public RuleCall getID_ASMLTerminalRuleCall_0() { return cID_ASMLTerminalRuleCall_0; }

		//("." ID_ASML)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID_ASML
		public RuleCall getID_ASMLTerminalRuleCall_1_1() { return cID_ASMLTerminalRuleCall_1_1; }
	}

	public class RestrictionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Restriction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGroupClauseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cGroupClauseGroupClauseEnumRuleCall_0_0 = (RuleCall)cGroupClauseAssignment_0.eContents().get(0);
		private final Assignment cPermissionClauseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPermissionClausePermissionClauseEnumRuleCall_1_0 = (RuleCall)cPermissionClauseAssignment_1.eContents().get(0);
		private final Assignment cRelactionTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRelactionTypeRelactionTypeEnumRuleCall_2_0 = (RuleCall)cRelactionTypeAssignment_2.eContents().get(0);
		private final Assignment cGroupClauseBAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGroupClauseBGroupClauseEnumRuleCall_3_0 = (RuleCall)cGroupClauseBAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cComponentBAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final CrossReference cComponentBAbstractComponentCrossReference_4_0_0 = (CrossReference)cComponentBAssignment_4_0.eContents().get(0);
		private final RuleCall cComponentBAbstractComponentQualifiedNameParserRuleCall_4_0_0_1 = (RuleCall)cComponentBAbstractComponentCrossReference_4_0_0.eContents().get(1);
		private final Keyword cCommaKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cMessageKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cMessageAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cMessageSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cMessageAssignment_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// Criar uma tipo para abarcar todos os atributos básicos, e assim evitar redundância e o uso exessivo de instanceof ao utilizar a linguagem programaticamente. (componentA+=([AbstractComponent|QualifiedName])*)?
		//Restriction:
		//	groupClause=GroupClause? permissionClause=PermissionClause? relactionType=RelactionType groupClauseB=GroupClause?
		//	(componentB+=[AbstractComponent|QualifiedName] ","?)* ("message" message=STRING)? ";";
		public ParserRule getRule() { return rule; }

		//groupClause=GroupClause? permissionClause=PermissionClause? relactionType=RelactionType groupClauseB=GroupClause?
		//(componentB+=[AbstractComponent|QualifiedName] ","?)* ("message" message=STRING)? ";"
		//// Criar uma tipo para abarcar todos os atributos básicos, e assim evitar redundância e o uso exessivo de instanceof ao utilizar a linguagem programaticamente. (componentA+=([AbstractComponent|QualifiedName])*)?
		public Group getGroup() { return cGroup; }

		//groupClause=GroupClause?
		public Assignment getGroupClauseAssignment_0() { return cGroupClauseAssignment_0; }

		//GroupClause
		public RuleCall getGroupClauseGroupClauseEnumRuleCall_0_0() { return cGroupClauseGroupClauseEnumRuleCall_0_0; }

		//permissionClause=PermissionClause?
		public Assignment getPermissionClauseAssignment_1() { return cPermissionClauseAssignment_1; }

		//PermissionClause
		public RuleCall getPermissionClausePermissionClauseEnumRuleCall_1_0() { return cPermissionClausePermissionClauseEnumRuleCall_1_0; }

		//relactionType=RelactionType
		public Assignment getRelactionTypeAssignment_2() { return cRelactionTypeAssignment_2; }

		//RelactionType
		public RuleCall getRelactionTypeRelactionTypeEnumRuleCall_2_0() { return cRelactionTypeRelactionTypeEnumRuleCall_2_0; }

		//groupClauseB=GroupClause?
		public Assignment getGroupClauseBAssignment_3() { return cGroupClauseBAssignment_3; }

		//GroupClause
		public RuleCall getGroupClauseBGroupClauseEnumRuleCall_3_0() { return cGroupClauseBGroupClauseEnumRuleCall_3_0; }

		//(componentB+=[AbstractComponent|QualifiedName] ","?)*
		public Group getGroup_4() { return cGroup_4; }

		//componentB+=[AbstractComponent|QualifiedName]
		public Assignment getComponentBAssignment_4_0() { return cComponentBAssignment_4_0; }

		//[AbstractComponent|QualifiedName]
		public CrossReference getComponentBAbstractComponentCrossReference_4_0_0() { return cComponentBAbstractComponentCrossReference_4_0_0; }

		//QualifiedName
		public RuleCall getComponentBAbstractComponentQualifiedNameParserRuleCall_4_0_0_1() { return cComponentBAbstractComponentQualifiedNameParserRuleCall_4_0_0_1; }

		//","?
		public Keyword getCommaKeyword_4_1() { return cCommaKeyword_4_1; }

		//("message" message=STRING)?
		public Group getGroup_5() { return cGroup_5; }

		//"message"
		public Keyword getMessageKeyword_5_0() { return cMessageKeyword_5_0; }

		//message=STRING
		public Assignment getMessageAssignment_5_1() { return cMessageAssignment_5_1; }

		//STRING
		public RuleCall getMessageSTRINGTerminalRuleCall_5_1_0() { return cMessageSTRINGTerminalRuleCall_5_1_0; }
 
		//// Criar uma tipo para abarcar todos os atributos básicos, e assim evitar redundância e o uso exessivo de instanceof ao utilizar a linguagem programaticamente. (componentA+=([AbstractComponent|QualifiedName])*)?
		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	
	
	public class CardinalityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Cardinality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOneEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOne1Keyword_0_0 = (Keyword)cOneEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cZeroEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cZero0Keyword_1_0 = (Keyword)cZeroEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cOneOrManyEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cOneOrMany1Keyword_2_0 = (Keyword)cOneOrManyEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cZeroOrManyEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cZeroOrMany0Keyword_3_0 = (Keyword)cZeroOrManyEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Cardinality:
		//	One="1" | Zero="0" | OneOrMany="1..*" | ZeroOrMany="0..*";
		public EnumRule getRule() { return rule; }

		//One="1" | Zero="0" | OneOrMany="1..*" | ZeroOrMany="0..*"
		public Alternatives getAlternatives() { return cAlternatives; }

		//One="1"
		public EnumLiteralDeclaration getOneEnumLiteralDeclaration_0() { return cOneEnumLiteralDeclaration_0; }

		//"1"
		public Keyword getOne1Keyword_0_0() { return cOne1Keyword_0_0; }

		//Zero="0"
		public EnumLiteralDeclaration getZeroEnumLiteralDeclaration_1() { return cZeroEnumLiteralDeclaration_1; }

		//"0"
		public Keyword getZero0Keyword_1_0() { return cZero0Keyword_1_0; }

		//OneOrMany="1..*"
		public EnumLiteralDeclaration getOneOrManyEnumLiteralDeclaration_2() { return cOneOrManyEnumLiteralDeclaration_2; }

		//"1..*"
		public Keyword getOneOrMany1Keyword_2_0() { return cOneOrMany1Keyword_2_0; }

		//ZeroOrMany="0..*"
		public EnumLiteralDeclaration getZeroOrManyEnumLiteralDeclaration_3() { return cZeroOrManyEnumLiteralDeclaration_3; }

		//"0..*"
		public Keyword getZeroOrMany0Keyword_3_0() { return cZeroOrMany0Keyword_3_0; }
	}

	public class ExpressionMatchingClauseElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionMatchingClause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNAME_START_WITHEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNAME_START_WITHNameStartWithKeyword_0_0 = (Keyword)cNAME_START_WITHEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNAME_ENDS_WITHEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNAME_ENDS_WITHNameEndsWithKeyword_1_0 = (Keyword)cNAME_ENDS_WITHEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cANNOTATED_WITHEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cANNOTATED_WITHAnnotatedWithKeyword_2_0 = (Keyword)cANNOTATED_WITHEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ExpressionMatchingClause:
		//	NAME_START_WITH="name start with" | NAME_ENDS_WITH="name ends with" | ANNOTATED_WITH="annotated with";
		public EnumRule getRule() { return rule; }

		//NAME_START_WITH="name start with" | NAME_ENDS_WITH="name ends with" | ANNOTATED_WITH="annotated with"
		public Alternatives getAlternatives() { return cAlternatives; }

		//NAME_START_WITH="name start with"
		public EnumLiteralDeclaration getNAME_START_WITHEnumLiteralDeclaration_0() { return cNAME_START_WITHEnumLiteralDeclaration_0; }

		//"name start with"
		public Keyword getNAME_START_WITHNameStartWithKeyword_0_0() { return cNAME_START_WITHNameStartWithKeyword_0_0; }

		//NAME_ENDS_WITH="name ends with"
		public EnumLiteralDeclaration getNAME_ENDS_WITHEnumLiteralDeclaration_1() { return cNAME_ENDS_WITHEnumLiteralDeclaration_1; }

		//"name ends with"
		public Keyword getNAME_ENDS_WITHNameEndsWithKeyword_1_0() { return cNAME_ENDS_WITHNameEndsWithKeyword_1_0; }

		//ANNOTATED_WITH="annotated with"
		public EnumLiteralDeclaration getANNOTATED_WITHEnumLiteralDeclaration_2() { return cANNOTATED_WITHEnumLiteralDeclaration_2; }

		//"annotated with"
		public Keyword getANNOTATED_WITHAnnotatedWithKeyword_2_0() { return cANNOTATED_WITHAnnotatedWithKeyword_2_0; }
	}

	public class ModuleMatchingParamenterElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ModuleMatchingParamenter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPAKCAGEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPAKCAGEByPackageNameKeyword_0_0 = (Keyword)cPAKCAGEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFOLDEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFOLDERByFolderNameKeyword_1_0 = (Keyword)cFOLDEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPAKCAGE_AND_FOLDEREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPAKCAGE_AND_FOLDERByPackageAndFolderNameKeyword_2_0 = (Keyword)cPAKCAGE_AND_FOLDEREnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cEXTERNAL_DEFINITIONEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cEXTERNAL_DEFINITIONByExternalImplementationKeyword_3_0 = (Keyword)cEXTERNAL_DEFINITIONEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum ModuleMatchingParamenter:
		//	PAKCAGE="by package name" | FOLDER="by folder name" | PAKCAGE_AND_FOLDER="by package and folder name" |
		//	EXTERNAL_DEFINITION="by external implementation";
		public EnumRule getRule() { return rule; }

		//PAKCAGE="by package name" | FOLDER="by folder name" | PAKCAGE_AND_FOLDER="by package and folder name" |
		//EXTERNAL_DEFINITION="by external implementation"
		public Alternatives getAlternatives() { return cAlternatives; }

		//PAKCAGE="by package name"
		public EnumLiteralDeclaration getPAKCAGEEnumLiteralDeclaration_0() { return cPAKCAGEEnumLiteralDeclaration_0; }

		//"by package name"
		public Keyword getPAKCAGEByPackageNameKeyword_0_0() { return cPAKCAGEByPackageNameKeyword_0_0; }

		//FOLDER="by folder name"
		public EnumLiteralDeclaration getFOLDEREnumLiteralDeclaration_1() { return cFOLDEREnumLiteralDeclaration_1; }

		//"by folder name"
		public Keyword getFOLDERByFolderNameKeyword_1_0() { return cFOLDERByFolderNameKeyword_1_0; }

		//PAKCAGE_AND_FOLDER="by package and folder name"
		public EnumLiteralDeclaration getPAKCAGE_AND_FOLDEREnumLiteralDeclaration_2() { return cPAKCAGE_AND_FOLDEREnumLiteralDeclaration_2; }

		//"by package and folder name"
		public Keyword getPAKCAGE_AND_FOLDERByPackageAndFolderNameKeyword_2_0() { return cPAKCAGE_AND_FOLDERByPackageAndFolderNameKeyword_2_0; }

		//EXTERNAL_DEFINITION="by external implementation"
		public EnumLiteralDeclaration getEXTERNAL_DEFINITIONEnumLiteralDeclaration_3() { return cEXTERNAL_DEFINITIONEnumLiteralDeclaration_3; }

		//"by external implementation"
		public Keyword getEXTERNAL_DEFINITIONByExternalImplementationKeyword_3_0() { return cEXTERNAL_DEFINITIONByExternalImplementationKeyword_3_0; }
	}

	public class GroupClauseElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "GroupClause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNULLEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNULLNullKeyword_0_0 = (Keyword)cNULLEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cONLYEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cONLYOnlyKeyword_1_0 = (Keyword)cONLYEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cONLY_THISEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cONLY_THISOnlyThisKeyword_2_0 = (Keyword)cONLY_THISEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum GroupClause:
		//	NULL="$null" | ONLY="only" | ONLY_THIS="only-this";
		public EnumRule getRule() { return rule; }

		//NULL="$null" | ONLY="only" | ONLY_THIS="only-this"
		public Alternatives getAlternatives() { return cAlternatives; }

		//NULL="$null"
		public EnumLiteralDeclaration getNULLEnumLiteralDeclaration_0() { return cNULLEnumLiteralDeclaration_0; }

		//"$null"
		public Keyword getNULLNullKeyword_0_0() { return cNULLNullKeyword_0_0; }

		//ONLY="only"
		public EnumLiteralDeclaration getONLYEnumLiteralDeclaration_1() { return cONLYEnumLiteralDeclaration_1; }

		//"only"
		public Keyword getONLYOnlyKeyword_1_0() { return cONLYOnlyKeyword_1_0; }

		//ONLY_THIS="only-this"
		public EnumLiteralDeclaration getONLY_THISEnumLiteralDeclaration_2() { return cONLY_THISEnumLiteralDeclaration_2; }

		//"only-this"
		public Keyword getONLY_THISOnlyThisKeyword_2_0() { return cONLY_THISOnlyThisKeyword_2_0; }
	}

	public class PermissionClauseElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "PermissionClause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMUSTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMUSTMustKeyword_0_0 = (Keyword)cMUSTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCANEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCANCanKeyword_1_0 = (Keyword)cCANEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCANNOTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCANNOTCannotKeyword_2_0 = (Keyword)cCANNOTEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum PermissionClause:
		//	MUST="must" | CAN="can" | CANNOT="cannot";
		public EnumRule getRule() { return rule; }

		//MUST="must" | CAN="can" | CANNOT="cannot"
		public Alternatives getAlternatives() { return cAlternatives; }

		//MUST="must"
		public EnumLiteralDeclaration getMUSTEnumLiteralDeclaration_0() { return cMUSTEnumLiteralDeclaration_0; }

		//"must"
		public Keyword getMUSTMustKeyword_0_0() { return cMUSTMustKeyword_0_0; }

		//CAN="can"
		public EnumLiteralDeclaration getCANEnumLiteralDeclaration_1() { return cCANEnumLiteralDeclaration_1; }

		//"can"
		public Keyword getCANCanKeyword_1_0() { return cCANCanKeyword_1_0; }

		//CANNOT="cannot"
		public EnumLiteralDeclaration getCANNOTEnumLiteralDeclaration_2() { return cCANNOTEnumLiteralDeclaration_2; }

		//"cannot"
		public Keyword getCANNOTCannotKeyword_2_0() { return cCANNOTCannotKeyword_2_0; }
	}

	public class RelactionTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "RelactionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cACCESSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cACCESSAccessKeyword_0_0 = (Keyword)cACCESSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDECLAREEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDECLAREDeclareKeyword_1_0 = (Keyword)cDECLAREEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cHANDLEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cHANDLEHandleKeyword_2_0 = (Keyword)cHANDLEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cEXTENDEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cEXTENDExtendKeyword_3_0 = (Keyword)cEXTENDEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cIMPLEMENTEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cIMPLEMENTImplementKeyword_4_0 = (Keyword)cIMPLEMENTEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cCREATEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cCREATECreateKeyword_5_0 = (Keyword)cCREATEEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cTHROWEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cTHROWThrowKeyword_6_0 = (Keyword)cTHROWEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cUSEANOTATIONEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cUSEANOTATIONUseAnnotationKeyword_7_0 = (Keyword)cUSEANOTATIONEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cDEPENDEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cDEPENDDependKeyword_8_0 = (Keyword)cDEPENDEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cREQUIRESEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cREQUIRESRequiresKeyword_9_0 = (Keyword)cREQUIRESEnumLiteralDeclaration_9.eContents().get(0);
		
		//enum RelactionType:
		//	ACCESS="access" | DECLARE="declare" | HANDLE="handle" | EXTEND="extend" | IMPLEMENT="implement" | CREATE="create" |
		//	THROW="throw" | USEANOTATION="use-annotation" | DEPEND="depend" | REQUIRES="requires";
		public EnumRule getRule() { return rule; }

		//ACCESS="access" | DECLARE="declare" | HANDLE="handle" | EXTEND="extend" | IMPLEMENT="implement" | CREATE="create" |
		//THROW="throw" | USEANOTATION="use-annotation" | DEPEND="depend" | REQUIRES="requires"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ACCESS="access"
		public EnumLiteralDeclaration getACCESSEnumLiteralDeclaration_0() { return cACCESSEnumLiteralDeclaration_0; }

		//"access"
		public Keyword getACCESSAccessKeyword_0_0() { return cACCESSAccessKeyword_0_0; }

		//DECLARE="declare"
		public EnumLiteralDeclaration getDECLAREEnumLiteralDeclaration_1() { return cDECLAREEnumLiteralDeclaration_1; }

		//"declare"
		public Keyword getDECLAREDeclareKeyword_1_0() { return cDECLAREDeclareKeyword_1_0; }

		//HANDLE="handle"
		public EnumLiteralDeclaration getHANDLEEnumLiteralDeclaration_2() { return cHANDLEEnumLiteralDeclaration_2; }

		//"handle"
		public Keyword getHANDLEHandleKeyword_2_0() { return cHANDLEHandleKeyword_2_0; }

		//EXTEND="extend"
		public EnumLiteralDeclaration getEXTENDEnumLiteralDeclaration_3() { return cEXTENDEnumLiteralDeclaration_3; }

		//"extend"
		public Keyword getEXTENDExtendKeyword_3_0() { return cEXTENDExtendKeyword_3_0; }

		//IMPLEMENT="implement"
		public EnumLiteralDeclaration getIMPLEMENTEnumLiteralDeclaration_4() { return cIMPLEMENTEnumLiteralDeclaration_4; }

		//"implement"
		public Keyword getIMPLEMENTImplementKeyword_4_0() { return cIMPLEMENTImplementKeyword_4_0; }

		//CREATE="create"
		public EnumLiteralDeclaration getCREATEEnumLiteralDeclaration_5() { return cCREATEEnumLiteralDeclaration_5; }

		//"create"
		public Keyword getCREATECreateKeyword_5_0() { return cCREATECreateKeyword_5_0; }

		//THROW="throw"
		public EnumLiteralDeclaration getTHROWEnumLiteralDeclaration_6() { return cTHROWEnumLiteralDeclaration_6; }

		//"throw"
		public Keyword getTHROWThrowKeyword_6_0() { return cTHROWThrowKeyword_6_0; }

		//USEANOTATION="use-annotation"
		public EnumLiteralDeclaration getUSEANOTATIONEnumLiteralDeclaration_7() { return cUSEANOTATIONEnumLiteralDeclaration_7; }

		//"use-annotation"
		public Keyword getUSEANOTATIONUseAnnotationKeyword_7_0() { return cUSEANOTATIONUseAnnotationKeyword_7_0; }

		//DEPEND="depend"
		public EnumLiteralDeclaration getDEPENDEnumLiteralDeclaration_8() { return cDEPENDEnumLiteralDeclaration_8; }

		//"depend"
		public Keyword getDEPENDDependKeyword_8_0() { return cDEPENDDependKeyword_8_0; }

		//REQUIRES="requires"
		public EnumLiteralDeclaration getREQUIRESEnumLiteralDeclaration_9() { return cREQUIRESEnumLiteralDeclaration_9; }

		//"requires"
		public Keyword getREQUIRESRequiresKeyword_9_0() { return cREQUIRESRequiresKeyword_9_0; }
	}
	
	private final ASMLModelElements pASMLModel;
	private final AbstractComponentElements pAbstractComponent;
	private final TerminalRule tID_ASML;
	private final ViewElements pView;
	private final CardinalityElements unknownRuleCardinality;
	private final AttributeElements pAttribute;
	private final AbstractNameConvetionElements pAbstractNameConvetion;
	private final ExpressionMatchingClauseElements unknownRuleExpressionMatchingClause;
	private final ExpressionMatchingOperatorElements pExpressionMatchingOperator;
	private final ModuleMatchingParamenterElements unknownRuleModuleMatchingParamenter;
	private final ModuleMatchingElements pModuleMatching;
	private final ClassMatchingElements pClassMatching;
	private final MetaModuleElements pMetaModule;
	private final QualifiedNameElements pQualifiedName;
	private final GroupClauseElements unknownRuleGroupClause;
	private final PermissionClauseElements unknownRulePermissionClause;
	private final RelactionTypeElements unknownRuleRelactionType;
	private final RestrictionElements pRestriction;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ASMLModelGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pASMLModel = new ASMLModelElements();
		this.pAbstractComponent = new AbstractComponentElements();
		this.tID_ASML = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID_ASML");
		this.pView = new ViewElements();
		this.unknownRuleCardinality = new CardinalityElements();
		this.pAttribute = new AttributeElements();
		this.pAbstractNameConvetion = new AbstractNameConvetionElements();
		this.unknownRuleExpressionMatchingClause = new ExpressionMatchingClauseElements();
		this.pExpressionMatchingOperator = new ExpressionMatchingOperatorElements();
		this.unknownRuleModuleMatchingParamenter = new ModuleMatchingParamenterElements();
		this.pModuleMatching = new ModuleMatchingElements();
		this.pClassMatching = new ClassMatchingElements();
		this.pMetaModule = new MetaModuleElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.unknownRuleGroupClause = new GroupClauseElements();
		this.unknownRulePermissionClause = new PermissionClauseElements();
		this.unknownRuleRelactionType = new RelactionTypeElements();
		this.pRestriction = new RestrictionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("br.ufmg.dcc.asml.ASMLModel".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ASMLModel:
	//	"architecture" name=ID_ASML "{" ("import" importURI=STRING ";")? components+=AbstractComponent* ("ignore"
	//	(ignore+=STRING ","?)* ";")? "}";
	public ASMLModelElements getASMLModelAccess() {
		return pASMLModel;
	}
	
	public ParserRule getASMLModelRule() {
		return getASMLModelAccess().getRule();
	}

	//AbstractComponent:
	//	MetaModule | View;
	public AbstractComponentElements getAbstractComponentAccess() {
		return pAbstractComponent;
	}
	
	public ParserRule getAbstractComponentRule() {
		return getAbstractComponentAccess().getRule();
	}

	//terminal ID_ASML:
	//	("a".."z" | "A".."Z" | "_" | ".") ("a".."z" | "A".."Z" | "_" | "-" | "." | "0".."9")*;
	public TerminalRule getID_ASMLRule() {
		return tID_ASML;
	} 

	//View:
	//	"view" name=ID_ASML "{" (("attributes" attributes+=Attribute ","?)* ";")? components+=AbstractComponent*
	//	restrictions+=Restriction* "}";
	public ViewElements getViewAccess() {
		return pView;
	}
	
	public ParserRule getViewRule() {
		return getViewAccess().getRule();
	}

	//enum Cardinality:
	//	One="1" | Zero="0" | OneOrMany="1..*" | ZeroOrMany="0..*";
	public CardinalityElements getCardinalityAccess() {
		return unknownRuleCardinality;
	}
	
	public EnumRule getCardinalityRule() {
		return getCardinalityAccess().getRule();
	}

	//Attribute:
	//	name=ID_ASML ":" value=STRING;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//AbstractNameConvetion:
	//	STRING | ClassMatching;
	public AbstractNameConvetionElements getAbstractNameConvetionAccess() {
		return pAbstractNameConvetion;
	}
	
	public ParserRule getAbstractNameConvetionRule() {
		return getAbstractNameConvetionAccess().getRule();
	}

	//enum ExpressionMatchingClause:
	//	NAME_START_WITH="name start with" | NAME_ENDS_WITH="name ends with" | ANNOTATED_WITH="annotated with";
	public ExpressionMatchingClauseElements getExpressionMatchingClauseAccess() {
		return unknownRuleExpressionMatchingClause;
	}
	
	public EnumRule getExpressionMatchingClauseRule() {
		return getExpressionMatchingClauseAccess().getRule();
	}

	//ExpressionMatchingOperator:
	//	AND="and" | OR="or";
	public ExpressionMatchingOperatorElements getExpressionMatchingOperatorAccess() {
		return pExpressionMatchingOperator;
	}
	
	public ParserRule getExpressionMatchingOperatorRule() {
		return getExpressionMatchingOperatorAccess().getRule();
	}

	//enum ModuleMatchingParamenter:
	//	PAKCAGE="by package name" | FOLDER="by folder name" | PAKCAGE_AND_FOLDER="by package and folder name" |
	//	EXTERNAL_DEFINITION="by external implementation";
	public ModuleMatchingParamenterElements getModuleMatchingParamenterAccess() {
		return unknownRuleModuleMatchingParamenter;
	}
	
	public EnumRule getModuleMatchingParamenterRule() {
		return getModuleMatchingParamenterAccess().getRule();
	}

	//ModuleMatching:
	//	parameter=ModuleMatchingParamenter;
	public ModuleMatchingElements getModuleMatchingAccess() {
		return pModuleMatching;
	}
	
	public ParserRule getModuleMatchingRule() {
		return getModuleMatchingAccess().getRule();
	}

	////	(expressionMatchings=ExpressionMatchingClause parameter=STRING (operator=ExpressionMatchingOperator )?)?
	//ClassMatching:
	//	expressionMatching=ExpressionMatchingClause parameter=STRING;
	public ClassMatchingElements getClassMatchingAccess() {
		return pClassMatching;
	}
	
	public ParserRule getClassMatchingRule() {
		return getClassMatchingAccess().getRule();
	}

	////ConfigurationElement: Configuration | XmlDocument | XmlElement | File ;
	// MetaModule:
	//	name=ID_ASML "{" (("attributes:" attributes+=Attribute ","?)* ";")? ("matching:" matching=STRING ";")?
	//	("description:" description=STRING ";")? components+=AbstractComponent* ("restrictions" "{"
	//	restrictions+=Restriction* "}")? "}";
	public MetaModuleElements getMetaModuleAccess() {
		return pMetaModule;
	}
	
	public ParserRule getMetaModuleRule() {
		return getMetaModuleAccess().getRule();
	}

	//QualifiedName:
	//	ID_ASML ("." ID_ASML)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//enum GroupClause:
	//	NULL="$null" | ONLY="only" | ONLY_THIS="only-this";
	public GroupClauseElements getGroupClauseAccess() {
		return unknownRuleGroupClause;
	}
	
	public EnumRule getGroupClauseRule() {
		return getGroupClauseAccess().getRule();
	}

	//enum PermissionClause:
	//	MUST="must" | CAN="can" | CANNOT="cannot";
	public PermissionClauseElements getPermissionClauseAccess() {
		return unknownRulePermissionClause;
	}
	
	public EnumRule getPermissionClauseRule() {
		return getPermissionClauseAccess().getRule();
	}

	//enum RelactionType:
	//	ACCESS="access" | DECLARE="declare" | HANDLE="handle" | EXTEND="extend" | IMPLEMENT="implement" | CREATE="create" |
	//	THROW="throw" | USEANOTATION="use-annotation" | DEPEND="depend" | REQUIRES="requires";
	public RelactionTypeElements getRelactionTypeAccess() {
		return unknownRuleRelactionType;
	}
	
	public EnumRule getRelactionTypeRule() {
		return getRelactionTypeAccess().getRule();
	}

	//// Criar uma tipo para abarcar todos os atributos básicos, e assim evitar redundância e o uso exessivo de instanceof ao utilizar a linguagem programaticamente. (componentA+=([AbstractComponent|QualifiedName])*)?
	//Restriction:
	//	groupClause=GroupClause? permissionClause=PermissionClause? relactionType=RelactionType groupClauseB=GroupClause?
	//	(componentB+=[AbstractComponent|QualifiedName] ","?)* ("message" message=STRING)? ";";
	public RestrictionElements getRestrictionAccess() {
		return pRestriction;
	}
	
	public ParserRule getRestrictionRule() {
		return getRestrictionAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
